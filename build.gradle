plugins {
    id "java"
    id "application"
    id "jacoco"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "de.undercouch.download" version "4.0.4"
    id "com.adarshr.test-logger" version "2.0.0"
}

sourceCompatibility = 1.8

group = "de.mat2095"
version = "0.1.0"

mainClassName = "de.mat2095.detunes.Main"


repositories {
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
    maven {
        url "https://repo.spring.io/plugins-release/"
    }
}

dependencies {
    compile "com.github.WilliamAHartman:Jamepad:1.3.2"
    compile "com.bulenkov:darcula:2018.2"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.0"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.6.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.0"
}


run {
    maxHeapSize = "2g"

    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}


task prepareTest {
    def tmpZip = new File(buildDir, "instr_test-v5.zip")
    def destFolder = new File("roms")
    download {
        src "http://blargg.8bitalley.com/nes-tests/instr_test-v5.zip"
        dest tmpZip
        overwrite false
    }
    copy {
        from(zipTree(tmpZip)) {
            include "instr_test-v5/**/*.nes"
            includeEmptyDirs = false
        }
        into destFolder
        eachFile {
            if (it.getRelativePath().getFile(destFolder).exists()) {
                it.exclude()
            }
        }
    }
    download {
        src "http://nickmass.com/images/nestest.nes"
        dest new File(destFolder, "nestest/nestest.nes")
        overwrite false
    }
}

test {
    dependsOn prepareTest
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}


shadowJar {
    zip64 = true
    mergeServiceFiles()
}
